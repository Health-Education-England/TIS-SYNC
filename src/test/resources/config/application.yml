# ===================================================================
# Spring Boot configuration.
#
# This configuration is used for unit/integration tests.
#
# More information on profiles: https://jhipster.github.io/profiles/
# More information on configuration properties: https://jhipster.github.io/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================


spring:
  h2.console.enabled: true
  h2.console.path: /h2-console
  main.allow-bean-definition-overriding: true
  application:
    name: sync
  jackson:
    serialization.write_dates_as_timestamps: false
  cache:
    caffeine.spec: maximumSize=100,expireAfterAccess=1m
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:h2:mem:tcs;DB_CLOSE_DELAY=-1;IGNORECASE=TRUE;MODE=MySQL
    name:
    username: sa
    password:
  flyway:
    enabled: false
  jpa:
    database-platform: io.github.jhipster.domain.util.FixedH2Dialect
    database: H2
    open-in-view: false
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    properties:
      hibernate.id.new_generator_mappings: true
      hibernate.cache.use_second_level_cache: false
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: true
      hibernate.hbm2ddl.auto: create-drop
  messages:
    basename: i18n/messages
  mvc:
    favicon:
      enabled: false
  security:
    basic:
      enabled: false
    user:
      name: admin
      password: admin
  elasticsearch:
    rest:
      uris: http://localhost:9200
  data:
    elasticsearch:
      cluster-nodes: localhost:9300
      cluster-name: docker-cluster
server:
  port: 10344
  address: localhost

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://jhipster.github.io/common-application-properties/
# ===================================================================
logging:
  level:
    ROOT: ${LOGGING_LEVEL_ROOT:INFO}
    org.hibernate.engine.internal: WARN
    org.flywaydb.core: ERROR

application:
  cron:
    personOwnerRebuildJob: ${APPLICATION_CRON_PERSONOWNERREBUILDJOB:0 05 0 * * *}
    personPlacementEmployingBodyTrustJob: ${APP_CRON_PERSON_PLACEMENT_EMPLOYING_BODY:0 09 0 * * *}
    personPlacementTrainingBodyTrustJob: ${APP_CRON_PERSON_PLACEMENT_TRAINING_BODY:0 29 0 * * *}
    postEmployingBodyTrustJob: ${APP_CRON_POST_EMPLOYING_BODY:0 09 1 * * *}
    postTrainingBodyTrustJob: ${APP_CRON_POST_TRAINING_BODY:0 19 1 * * *}
    personElasticSearchJob: ${APP_CRON_PERSON_ELASTIC_SEARCH:0 29 1 * * *}
    personRecordStatusJob: ${APPLICATION_CRON_PERSONRECORDSTATUSJOB:0 0 1 * * *}
    revalCurrentPmJob: ${APPLICATION_CRON_REVALCURRENTPMJOB:0 39 1 * * *}
    revalCurrentPlacementJob: ${APPLICATION_CRON_REVALCURRENTPLACEMENTJOB:0 49 1 * * *}
    recordResendingJob: ${APPLICATION_CRON_RECORDRESENDINGJOB:0 * * * * *}
    postFundingStatusSyncJob: ${APPLICATION_CRON_POSTFUNDING_STATUS_SYNCJOB:0 0 3 * * *}
  jobs:
    runOnStartup:
      earliest: ${APPLICATION_JOBS_RUNONSTARTUP_EARLIEST:05:01}
      latest: ${APPLICATION_JOBS_RUNONSTARTUP_LATEST:05:00}
    personRecordStatusJob:
      dateOfChangeOverride: ${APPLICATION_JOBS_PERSONRECORDSTATUSJOB_DATEOFCHANGEOVERRIDE:}
  aws:
    kinesis:
      streamName: ${AWS_KINESIS_STREAM_NAME:streamName}
    sqs:
      queueUrl: ${AWS_SQS_QUEUE_URL:queueUrl}

  rabbit:
    reval:
      exchange: ${REVAL_RABBIT_EXCHANGE:reval.exchange}
      routingKey.trainee.update: ${REVAL_RABBIT_TRAINEEUPDATE_ROUTING_KEY:reval.trainee.update}

slack:
  api:
    token: ${SLACK_API_TOKEN:slack-api-token}
  job:
    notification-channel:

kc:
  realm: ${KC_REALM:lin}
  client:
    id: ${KC_CLIENT_ID:api-tokens}
  server:
    url: ${KC_SERVER_URL:url}
  username: ${KC_USERNAME:username}
  password: ${KC_PASSWORD:password}
  timeout: ${KC_TIMEOUT:10000}

enable.es.search: false
